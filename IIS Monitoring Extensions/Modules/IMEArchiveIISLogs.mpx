<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <TypeDefinitions>
    <ModuleTypes>
        <DataSourceModuleType ID="IIS.Monitoring.Extensions.DataSource.ArchiveIISLogs" Accessibility="Public" Batching="false">
        <Configuration>
          <IncludeSchemaTypes>
            <SchemaType>Windows!Microsoft.Windows.PowerShellSchema</SchemaType>
          </IncludeSchemaTypes>
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" />
          <xsd:element minOccurs="1" name="SyncTime" type="xsd:string" />
          <xsd:element minOccurs="1" name="Logging" type="xsd:boolean" />
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" />
          <xsd:element minOccurs="1" name="LastNDays" type="xsd:integer" />
          <xsd:element minOccurs="1" name="ArchivePath" type="xsd:string" />
          <xsd:element minOccurs="1" name="TempFolder" type="xsd:string" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="Logging" Selector="$Config/Debug$" ParameterType="bool" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="LastNDays" Selector="$Config/LastNDays$" ParameterType="int" />
          <OverrideableParameter ID="ArchivePath" Selector="$Config/ArchivePath$" ParameterType="string" />
          <OverrideableParameter ID="TempFolder" Selector="$Config/TempFolder$" ParameterType="string" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Script" TypeID="IIS.Monitoring.Extensions.DataSource.Powershell">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime>$Config/SyncTime$</SyncTime>
                <ScriptName>ArchiveIISLogs.ps1</ScriptName>
                <ScriptBody>
                  <![CDATA[
[CmdLetBinding()]
Param(
    [string]$SettingsPath = ".\Archive-IISLogs.psd1",
    [string]$LastNDays = 1,
    [string]$DeleteOlderThan = 30,
    #[Parameter(Mandatory=$True)]
    [string]$ArchivePath = "C:\temp\Archive-IISLogs\Archive",
    [string]$TempFolder = $Env:Temp,
    [boolean]$Logging
)




Function Start-CompressionQueue {
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true)]    
        [System.Collections.Queue]$Queue,
        [Parameter(Mandatory=$true)]
        [string]$TempFolder,
        [switch]$RemoveEmptySnapshot
    )
    $QueuePath = "$TempFolder\CompressQueue.xml" 
    $QueueSize = $Queue.Count
    $ItemsProcessed = 0
    do {
        Write-Log "Current number of items in the Queue: $($Queue.Count)"
        $LogToCompress = $Queue.Peek()
        Write-Log -Message "Working on $($LogToCompress.ZipName)"
        #Move-Item -Path $FileToMove.FullName  C:\temp\Target | Out-Null
        try {
        
            Compress-Files -FileItems ($LogToCompress.FileItems) -zipFilePath "$TempFolder\$($LogtoCompress.zipName)" -CompressionLevel "Optimal" -ErrorAction Stop
            Remove-Item -Path $LogToCompress.FileItems -ErrorAction Stop
            Write-Log -Message "Deleted $($LogToCompress.FileItems)"
            $queue.Dequeue() | out-null
            Write-Log -Message "Successfully compressed $($LogToCompress.ZipName)"
        
        }
        catch {
        
            Write-Log -Message "$($Error[0].Exception.Message)" -Level Error
        }
        Finally{
            Write-Log -Message "Taking Snapshot"
            Export-Clixml -Path $QueuePath -InputObject $Queue
            ++$ItemsProcessed
        }
 
    } until ($Queue.Count -eq 0 -or $QueueSize -eq $ItemsProcessed)

    #Remove the Snapshot once finished
    if($Queue.Count -eq 0 -and $RemoveEmptySnapshot) {

        Remove-Item $QueuePath
        
        }
}

<#
.SYNOPSIS
    Writes Log to specified file if not logs to a file under User temp.
.DESCRIPTION
    Writes Log to specified file if not logs to a file under User temp. Function also writes the log to the Verbose stream if -Verbose used.
.EXAMPLE
    PS C:\> Write-Log -LogFile c:\temp\mylog.txt -Message "Error Occured $($Error[0].Exception.Message)" -Tag "Script Start" -Level Error
    VERBOSE: [8/1/2019 7:21:13 AM][Error][EMREG-DSC][Script Start] Error Occured Cannot bind argument to parameter 'Message' because it is an empty string.
    
    The above example Writes the message to the LogFile specifed with the Level Type error and the Optional Tag used "ScriptStart"
.EXAMPLE
    PS C:\> Write-Log -Message "Script Started" -Tag "Script Start" -Level Info
    VERBOSE: [8/1/2019 7:22:43 AM][Info][EMREG-DSC][Script Start] Script Started
    
    The above example Writes the message ehich is the only require parameter. The file is save to users temp folder with the format Write-Log-yyyy-M-d.log
.INPUTS
    String
.OUTPUTS
    Output (if any)
.NOTES
    Author: Emre Güçlü
    Version: 1.0
    Release Date:1 August 2019
#>
function Write-Log {
    [CmdletBinding()]
    param (
        # setting Default path the User Temp.
        [Parameter(Mandatory=$true)]
        [String]$Message,
        [ValidateSet("Error","Warning","Info")] 
        [string]$Level="Info", 
        [String]$LogFile, #"$($Env:Temp)\Write-Log-$(Get-Date -Format yyyy-M-d).log",
        [string]$Tag 

    )
    if (!$LogFile) {
       if ($Script:LogFile) {
           
            $LogFile = ($Script:LogFile)
        
        } else {
            $LogFile = "$($Env:Temp)\Write-Log-$(Get-Date -Format yyyy-M-d).log"
        }
    }
    if ($Tag) {
        $Log = "[$(Get-Date -Format G)][$Level][$($env:ComputerName)][$Tag] $Message"
    } else {
        $Log = "[$(Get-Date -Format G)][$Level] $Message"
    }
    $Log |  Out-File -FilePath $LogFile -Append
    Write-Verbose -Message  $Log
    
}


<#
.SYNOPSIS
    Copies files with retry support.
.DESCRIPTION
    Copies files with retry support.
.EXAMPLE
    PS C:\> Write-Log -LogFile c:\temp\mylog.txt -Message "Error Occured $($Error[0].Exception.Message)" -Tag "Script Start" -Level Error
    VERBOSE: [8/1/2019 7:21:13 AM][Error][EMREG-DSC][Script Start] Error Occured Cannot bind argument to parameter 'Message' because it is an empty string.
    
    The above example Writes the message to the LogFile specifed with the Level Type error and the Optional Tag used "ScriptStart"
.EXAMPLE
    PS C:\> Copy-Files -FilesToCopy $files -Destination $Destination -RetryCount 5 -RetryInterval 30 -Verbose
.INPUTS
    String
.OUTPUTS
    Output (if any)
.NOTES
    Author: Emre Güçlü
    Version: 1.0
    Release Date:1 August 2019
#>

Function Copy-Files {


    [CmdletBinding()]
    param(
    
        [string[]]$FilesToCopy,
        [string]$Destination,
        [int32]$RetryCount = 10,
        [int32]$RetryInterval = 60,
        [switch]$Move
    )
    
   
    #Copy Files
    Foreach ($File in $FilesToCopy) {
        $CurrentRetry = 1
    
        #Set target Path to test
        $TargetFile = "$Destination\$($file | split-path -Leaf )"
    
        do {
    
            if ($CurrentRetry -eq $RetryCount) {
    
                $Message = "Retry limit has reached after $RetryCount retries. Exiting script."
    
                Write-Log -Message $Message -Level Error
                Throw $Message
    
            }
    
            Try {
                Write-Log -Message "Copying $File to to $Destination."
                #try copying
                Copy-Item -Path $File -Destination $TargetFile -Force -ErrorAction Stop
                Write-Log -Message "Copied $File to to $Destination after retrying $CurrentRetry times."
                if ($Move) {
                    Remove-Item -Path $File -ErrorAction Stop
                    Write-Log -Message "-Move is used. Deleted $File."
                    
                } else {

                    Write-Log -Message "-Move is not used. Will not delete $File."

                }
    
            }
            Catch {
    
                $ErrorOccured = $true
    
                Write-Log -Message "Retry Count: $CurrentRetry. Could not Copy $File to $Destination. $($_.Exception.GetType().FullName), Message:$($_.Exception.Message)"
                Write-Log -Message "Waiting for $RetryInterval Seconds." 
    
                # if error occurs sleep
                Start-Sleep -Seconds $RetryInterval | out-null
    
                ++$CurrentRetry
    
            }
            Finally {
    
                if (!$ErrorOccured) {
    
                    Write-Log -Message "Copied $File to to $Destination after retrying $CurrentRetry times."
    
                }
    
            }
    
        } 
    
        until (test-path -Path $TargetFile)
    
    }
}

<#
.SYNOPSIS
    Compresses files using System.IO.Compression.Zip type.
.DESCRIPTION
    Writes Log to specified file if not logs to a file under User temp. Function also writes the log to the Verbose stream if -Verbose used.

    INMPORTANT: System.IO.Compression.Zip type may not compress files over 4gb due to a limitation of .Net. 
.EXAMPLE
    $FileItems = (Get-ChildItem -Path C:\temp\compresstest\2GbLogs).FullName
    Compress-Files -FileItems $FileItems -zipFilePath 'c:\temp\compresstest\2gb.zip' -Verbose -compressionLevel Fastest
    

    VERBOSE: Size of Files to Zip: 11513.54 Mbs
    VERBOSE: Created zip: c:\temp\compresstest\1gb.zip
    VERBOSE: CompressionLevel: Optimal
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\1.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\1.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\10.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\10.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\2.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\2.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\3.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\3.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\4.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\4.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\5.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\5.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\6.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\6.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\7.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\7.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\8.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\8.Log
    VERBOSE: Working on C:\temp\compresstest\1GbLogs\9.Log. File Size: 1151.35 Mbs
    VERBOSE: Updated zip: c:\temp\compresstest\1gb.zip, Added C:\temp\compresstest\1GbLogs\9.Log
    VERBOSE: Compression Duration = 400.0986761 Seconds
    VERBOSE: ZipFile = c:\temp\compresstest\1gb.zip Size: 288.29 Mbs
    VERBOSE: Compression Ratio : 40 Times
    VERBOSE: Compression Percent : 97%

    The above example compresses the files with the specified compression method passed to Compress-Files

.INPUTS
    String
.OUTPUTS
    Output (if any)
.NOTES
    Author: Emre Güçlü
    Version: 1.0
    Release Date:1 August 2019
    Support Note: System.IO.Compression.Zip type may not compress files over 4gb due to a limitation of .Net.  
#>

Function Compress-Files {
    [CmdletBinding()]
    Param(
        [string]$zipFilePath = 'c:\temp\compresstest\1gb.zip',
        [string[]]$FileItems,
        [ValidateSet("Optimal", "Fastest", "NoCompression")]
        [string]$CompressionLevel
    )
    $Timer = Get-Date
    Add-Type -Assembly 'System.IO.Compression.FileSystem'
    $TotalFileSize = [Math]::Round((($FileItems | Get-ChildItem | Measure-Object -Property Length -Sum).Sum / 1mb), 2)
    Write-Log -Message "Size of Files to Zip: $TotalFileSize Mbs"
    #Create Empty zip
    try {
        $zip = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'create')
    }
    Catch {
        Write-Log -Message "$($_.Exception.GetType().FullName), Message:$($_.Exception.Message)"
        $ErrorOccured = $true
        Throw
    }
    Finally {
        if ($ErrorOccured) {
            $Zip.Dispose()
        }
        else {
            Write-Log -Message "Created zip: $zipFilePath"
            $zip.dispose()
        }
    }
    
    #Set the Compression Level
    Write-Log -Message "CompressionLevel: $CompressionLevel"
    $compressionLevel = [System.IO.Compression.CompressionLevel]::($CompressionLevel)
    
    
    Foreach ($File in $FileItems) {
    
        Write-Log -Message "Working on $File. File Size: $([Math]::Round((($File | Get-ChildItem | Measure-Object -Property Length -Sum).Sum /1mb),2)) Mbs"
    
        try {
            #Open the zip file
            $zip = [System.IO.Compression.ZipFile]::Open($zipFilePath, 'update')
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zip, $file, (Split-Path $file -Leaf), $compressionLevel) | out-null
        }
        catch {
    
            Write-Log -Message "$($_.Exception.GetType().FullName), Message:$($_.Exception.Message)"
            $ErrorOccured = $true
    
        }
        finally {
    
            if ($ErrorOccured) {
                $Zip.Dispose()
            }
            else {
                Write-Log -Message "Updated zip: $zipFilePath, Added $File"
                $zip.dispose()
    
            }
        }
    }
    
    Write-Log -Message "Compression Duration = $(((Get-Date) - $Timer).TotalSeconds) Seconds"
    Write-Log -Message "ZipFile = $zipFilePath Size: $([Math]::Round((($zipFilePath | Get-ChildItem | Measure-Object -Property Length -Sum).Sum /1mb),2)) Mbs"
    Write-Log -Message "Compression Ratio : $( [Math]::Round($TotalFileSize / (($zipFilePath | Get-ChildItem | Measure-Object -Property Length -Sum).Sum /1mb))) Times"
    Write-Log -Message "Compression Percent : $([Math]::Round(100 - [Math]::Round((($zipFilePath | Get-ChildItem | Measure-Object -Property Length -Sum).Sum /1mb),2) / $TotalFileSize * 100))%"
    
}

function Convert-ByteToMb {
    [CmdletBinding()]
    param (
        [double]$Byte
    )
    
    [Math]::Round($Byte / 1mb)
}

function Backup-Logs {
    [CmdletBinding()]
    param (
        [Parameter(ValueFromPipelineByPropertyName=$True,ValueFromPipeline=$True)]
        [string[]]$Path
    )
    

    
    process {
        foreach ($item in $Path) {
            if ((test-path -path $item)) {

                Get-ChildItem -Path $item -File | Where-Object {$_.Name -match '\.(?<ComputerName>\S+)\.,(?<WebSite>(\s|\S)+),(?<Date>\S+)\.zip'} | ForEach-Object {
                    $ComputerName = $matches['ComputerName']
                    $WebSite = $matches['WebSite']
                    Write-Log -Message "ComputerName = $ComputerName ,Web Site = $WebSite ,Date = $($matches['Date'])"
                    # Generate the actual path including servername
                    $ArchiveServerPath = "$ArchivePath\\$ComputerName\"
                    Write-Log -Message "Path to copy = $ArchiveServerPath"
                    New-Item -Path $ArchiveServerPath -Name $WebSite -Force  -ItemType Directory | out-null
                         
                    Copy-Files -FilesToCopy $_.FullName -Destination "$ArchiveServerPath\$Website" -Move
                    Write-Log -Message ("Found $($_.FullName) under $item. Copied to $ArchiveServerPath"+$WebSite+" and deleted.")
                }    
                
            
            
            }
        }

    }
    

}

# SCRIPT MAIN STARTS HERE
<#

ToDo

1) Add Requirements for 
    - Modules
    - Powershell Version
2) Check temp folders existenace
3) Check free space for compression
4) Check connection to remote path
5) add regex file match to variable and replace any where in the code 
   



#>

#$Guid = '9ae9e263-2323-421d-9b65-2b2182350e7b'
#Setting Verobse if $Logging set to $true - used for managementpack
if ($Logging) {
       $VerbosePreference = "continue"
    }
#Initilizing LogFile Variable
[String]$LogFile="$TempFolder\Write-Log-$(Get-Date -Format yyyy-M-d).log"
$StartDate = Get-Date
Write-Log -Message "Script Started"
# Preparing and getting the registry key
if (!(Test-path -Path HKLM:\SOFTWARE\Archive-IISLogs)) {
    Write-Log -Message "HKLM:\SOFTWARE\Archive-IISLogs does not exist creating it"
    New-item -Path HKLM:\SOFTWARE -Name Archive-IISLogs
    New-ItemProperty -Path HKLM:\SOFTWARE\Archive-IISLogs -Name TempFolder -Type string -Value $TempFolder
} else {
    Write-Log -Message "HKLM:\SOFTWARE\Archive-IISLogs exists." 
    $RegSettings =Get-ItemProperty -Path HKLM:\SOFTWARE\Archive-IISLogs\
    
    # if the tempfolder and registry is different grab the previous one to check later
    if ($RegSettings.TempFolder -ne $TempFolder) {
    $PreviousTempFolder = $RegSettings.TempFolder
    Write-Log -Message "Copied previous TempFolder settings for later use and set the current temp folder to TempFolder"       
    }

     
    Set-ItemProperty -Path HKLM:\SOFTWARE\Archive-IISLogs -Name TempFolder -Type string -Value $TempFolder
}

Write-Log -Message "Current TempFolder : $TempFolder"

<#
Folllowing is the regex match for the file under tempfolder to be checked and copied.

".EMREG-DSC.,Test Site 5,2019-07-30.zip" -match '\.(?<ComputerName>\S+)\.,(?<WebSite>(\s|\S)+),(?<Date>\S+)\.zip'
#>


# Create $TempFolder
if (!(Test-path -path $TempFolder)) {

    try {
        new-item -Path (Split-Path -Path $TempFolder -Parent) -Name (Split-Path -Path $TempFolder -Leaf) -ItemType Directory -ErrorAction Stop
        Write-Log -Message "Successfully Created $TempFolder" 
    }
    catch {
        Write-Log -Message "Could not Create $TempFolder Exception Type: $($_.Exception.GetType().FullName), Message:$($_.Exception.Message)" -LogFile "$($Env:Temp)\Write-Log-$(Get-Date -Format yyyy-M-d).log"
        Throw
    }

}

# Backup the files under Previous and existing temp folders before starting to compress

if(![string]::IsNullOrEmpty($PreviousTempFolder)){
Backup-Logs -Path $TempFolder, $PreviousTempFolder
} else {Backup-Logs -Path $TempFolder}


#get the free space before compression
$TempDriveFreeSpace = (get-item -Path $TempFolder).PsDrive.Free

#Script Start
Import-Module WebAdministration -Verbose:$false

#Get the settings file if exists
$OverrideSettings = Import-PowerShellDataFile -Path $SettingsPath -ErrorAction SilentlyContinue

# set the default settings using Paremeters supplied
$DefaultSettings = @{Default = @{LastNDays = $LastNDays; DeleteOlderThan = $DeleteOlderThan } }

#Map to ArchivePath
New-PSDrive -Name ArchiveIISLogs -PSProvider FileSystem -Root $ArchivePath | Out-Null

# Create Archive folder for Server if it does not exist
if (!(Test-Path -Path "ArchiveIISLogs:\$($env:COMPUTERNAME)")) {
    New-Item -Path "ArchiveIISLogs:\" -Name ($env:COMPUTERNAME) -ItemType "directory"
    Write-Log  -Message  "Creating $($env:COMPUTERNAME) Folder in $ArchivePath"
}



$TotalLogSize  = (get-childitem -Path $WebSiteInfos.LogDirectory -File | Measure-Object -Property Length -Sum).Sum

# If we dont have enough space exit the script before compression
if (($TotalLogSize / 5) -gt $TempDriveFreeSpace) {

    $Message = "Not Enough free space. Exiting script Total log size of is $(Convert-ByteToMb -Byte $TotalLogSize) Mbs. Current Free for $TempFolder drive is $(Convert-ByteToMb -Byte $TempDriveFreeSpace) Mbs."
    Write-Log -Message $Message -Level Error
    throw $Message   
}

# get the site information including site name and Log Directory
$WebSiteInfos = Get-Website | Select-Object -Property Name, ID, @{Name = 'LogDirectory'; Expression = { "$($_.LogFile.Directory)\W3SVC$($_.ID)" -Replace "%SystemDrive%", "$($env:SystemDrive)" } }
#Initilize Queue for compression
$Queue = New-Object -TypeName System.Collections.Queue

foreach ($WebSiteInfo in $WebSiteInfos) {
    Write-Log -Message "Working on Site: $($WebSiteInfo.Name), SiteID:  $($WebSiteInfo.ID), LogDirectory: $($WebSiteInfo.LogDirectory)"

    #Setting DeleteOlderThan depending on Overrides
    if ($OverrideSettings."$($WebSiteInfo.Name)".DeleteOlderThan) {
        $DeleteOlderThan = $OverrideSettings."$($WebSiteInfo.Name)".DeleteOlderThan
        Write-Log -Message "Found Overidde Settings for DeleteOlderThan: $DeleteOlderThan."
    }
    else {
        $DeleteOlderThan = $DefaultSettings.Default.DeleteOlderThan
        Write-Log  -Message "Will use defeault settings for DeleteOlderThan: $DeleteOlderThan."
    }

    #Setting LastNDays depending on Overrides
    if ($OverrideSettings."$($WebSiteInfo.Name)".LastNDays) {
        $LastNDays = $OverrideSettings."$($WebSiteInfo.Name)".LastNDays
        Write-Log  -Message "Found Overidde Settings for LastNDays: $LastNDays."
    }
    else {
        $LastNDays = $DefaultSettings.Default.LastNDays
        Write-Log -Message "Will use defeault settings for LastNDays: $LastNDays."
    }

    #Formatting and Grouping based on dates. The Result group will be including all we need to loop in.
    $DatesGroup = (Get-ChildItem -path ($WebSiteInfo.LogDirectory) -File).Where( { $_.LastWriteTime -lt (Get-Date).AddDays(-1 * $LastNDays) }) | Select-Object -Property FullName,Length,@{Name='Date';Expression = {$_.LastWriteTime.ToString('yyyy-MM-dd')}}|Group-Object -Property Date
    $TotalLogSizeToZip = [Math]::Round(($DatesGroup.Group |ForEach-Object { $_.Length} | Measure-Object -Sum).Sum / 1mb,2)
    Write-Log -Message " Total Log Size to zip: $TotalLogSizeToZip Mbs."
    Foreach ($DateGroup in $DatesGroup) {

    # out "." cannot be used in ComputerNames and also "," cannot be used in websites therefore we are using as seperators in filenames
    $ZipName = ".$($env:COMPUTERNAME).,$($WebSiteInfo.Name),$($DateGroup.Name).zip"
    
    $QueueItem= [PSCustomObject]@{
        ZipName = $ZipName
        FileItems = $DateGroup.Group.FullName
        WebSite = $WebSiteInfo.Name
        Date = $DateGroup.Name
        LogSize = [Math]::Round((($DateGroup.Group.Length | Measure-Object -Sum).Sum / 1mb),2)
        LogDirectory = $WebSiteInfo.LogDirectory
    }
    $Queue.Enqueue($QueueItem)
    Write-Log -Message "Enqueued $($QueueItem.FileItems.Count) files for $($QueueItem.Website) in $($QueueItem.ZipName) under $($QueueItem.LogDirectory) Log size for Date: $($QueueItem.Logsize) Mbs"  
}
    
}
if ($Queue.Count -gt 0) {
Start-CompressionQueue -Queue $Queue -TempFolder $TempFolder -RemoveEmptySnapshot
# Copy zips to Archive Folder now
Backup-Logs -Path $TempFolder
}



#Cleanup
Remove-PSDrive -Name ArchiveIISLogs
Write-Log "Script ended. Duration = $([Math]::Round((((Get-Date) - $startdate).TotalSeconds),2)) seconds"

#endegion
                  
]]>
                </ScriptBody>
                <SnapIns />
                <Parameters>
                  <Parameter>
                    <Name>LastNDays</Name>
                    <Value>$Config/LastNDays$</Value>
                    <Name>ArchivePath</Name>
                    <Value>$Config/ArchivePath$</Value>
                    <Name>TempFolder</Name>
                    <Value>$Config/TempFolder$</Value>
                    <Name>Logging</Name>
                    <Value>$Config/Logging$</Value>
                  </Parameter>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </DataSource>
            </MemberModules>
            <Composition>
                <Node ID="Script" />
              </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="IIS.Monitoring.Extensions.DataSource.ArchiveIISLogs">
          <Name>Data Source for ArchiveIISLogs</Name>
          <Description>Powershell DataSource</Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
